# @Time : 2024/6/19 23:24
# @Author : luoxin

"""
在正则表达式中，有几个符号用于表示字符或组的出现次数：

*：匹配前面的子表达式零次或多次。>=0 例如，zo* 能匹配 "z" 以及 "zoo"。
+：匹配前面的子表达式一次或多次。>=1 例如，zo+ 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。
?：匹配前面的子表达式零次或一次。0,1 例如，do(es)? 可以匹配 "do" 或 "does" 中的"do" 。
^：匹配输入字符串的开始位置
$：匹配输入字符串的结束位置
{n}：n 是一个非负整数。匹配确定的 n 次。=n 例如，o{2} 不能匹配 "Bob" 中的 "o"，但是能匹配 "food" 中的两个 o。
{n,}：n 是一个非负整数。至少匹配 n 次。>=n 例如，o{2,} 不能匹配 "Bob" 中的 "o"，但能匹配 "foooood" 中的所有 o。
{n,m}：m 和 n 均为非负整数，其中n <= m。>=n 且 <=m。例如，o{2,5} 将匹配 "foooood" 中的前五个 o。

注意：这些符号都是表示其前面的子表达式的出现次数。如果没有特定的子表达式在它们前面，它们通常将匹配一个普通字符。例如，* 会匹配一个星号字符，而不是表示前面的字符出现零次或多次。
"""
import re

"""
案例1：
    a7a a45f d0098d 在msg中搜索出上述格式的内容。以字母开头和结尾，数字至少出现一次
"""
msg = 'a7aasdfad88dfadfsd8888adf'
# 把代表次数的符号放在要规定次数的字符后面
result = re.findall('[a-z][0-9]+[a-z]', msg)  # 得出：['a7a', 'd88d', 'd8888a']
print(result)

"""
案例2：
    QQ号码验证：
        1：5-11位
        2：第一位不能是0
"""
qq = '34234234'
# 用^ 和 $ 来卡开头与结尾，用于和需要比对的整个字符串进行比较
# 用{}来卡前一个位置的数量，下面例子中的代表是≥4且≤10的数量
result = re.match('^[1-9][0-9]{4,10}$', qq)
print(result)

# 用户名可以是字母或者数字，不能是数字开头，用户名长度必须6位以上
re.match('^[a-zA-Z][0-9a-zA-Z]{5,}$',qq)


